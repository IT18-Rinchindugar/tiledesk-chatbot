#!/bin/bash

echo "ü§ñ AI Service –∞—Å—É—É–¥–ª—ã–≥ –∑–∞—Å–∞–∂ –±–∞–π–Ω–∞..."

echo "1Ô∏è‚É£ –û–¥–æ–æ–≥–∏–π–Ω AI endpoint-–∏–π–≥ —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞..."
echo "üîç TiledeskIntentsMachine.js –¥–æ—Ç–æ—Ä hardcoded URL:"
grep -n "host.docker.internal:3000" tybotRoute/engine/TiledeskIntentsMachine.js

echo ""
echo "2Ô∏è‚É£ AI Service –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞..."
echo "üì° Testing AI endpoint..."
curl -s -X POST http://host.docker.internal:3000/model/parse \
  -H "Content-Type: application/json" \
  -d '{"model":"test","text":"hello"}' || echo "‚ùå AI Service —Ö–æ–ª–±–æ–≥–¥–æ—Ö–≥“Ø–π –±–∞–π–Ω–∞"

echo ""
echo "3Ô∏è‚É£ –®–∏–π–¥—ç–ª —Å–æ–Ω–≥–æ—Ö:"
echo ""
echo "üéØ OPTION A: MongoDB NLP –∞—à–∏–≥–ª–∞—Ö (–≠–Ω–≥–∏–π–Ω, –∞–∂–∏–ª–ª–∞—Ö)"
echo "   - intentsEngine = 'none' —ç—Å–≤—ç–ª MongoDB fulltext search"
echo "   - Exact match + fulltext search –∞—à–∏–≥–ª–∞–Ω–∞"
echo ""
echo "üéØ OPTION B: External AI Service —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö (–¢”©–≤”©–≥—Ç—ç–π)"
echo "   - Tiledesk AI service —ç—Ö–ª“Ø“Ø–ª—ç—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π"
echo "   - Docker-compose.yml –¥–æ—Ç–æ—Ä AI service –Ω—ç–º—ç—Ö"
echo ""

read -p "–ê–ª—å —à–∏–π–¥–ª–∏–π–≥ —Å–æ–Ω–≥–æ—Ö –≤—ç? (A/B): " choice

case $choice in
    [Aa]* )
        echo "‚úÖ MongoDB NLP –∞—à–∏–≥–ª–∞—Ö–∞–∞—Ä —Å–æ–Ω–≥–æ–ª–æ–æ"
        echo ""
        echo "üîß Bot configuration-–∏–π–≥ MongoDB NLP —Ä“Ø“Ø —à–∏–ª–∂“Ø“Ø–ª–∂ –±–∞–π–Ω–∞..."
        
        # MongoDB-–¥ intentsEngine-–∏–π–≥ 'none' –±–æ–ª–≥–æ—Ö
        docker-compose exec mongodb mongosh -u admin -p password123 --eval "
        use tiledesk;
        print('üìä –û–¥–æ–æ–≥–∏–π–Ω bot configuration:');
        db.faq_kbs.find({name: 'itrader'}).forEach(function(doc) {
            print('Bot ID:', doc._id, 'intentsEngine:', doc.intentsEngine);
        });
        
        print('üîß intentsEngine-–∏–π–≥ none –±–æ–ª–≥–æ–∂ –±–∞–π–Ω–∞...');
        var result = db.faq_kbs.updateMany(
            {name: 'itrader'},
            {\$set: {intentsEngine: 'none', trashed: false}}
        );
        print('Update result:', result);
        
        print('‚úÖ –®–∏–Ω—ç—á–ª—ç–≥–¥—Å—ç–Ω configuration:');
        db.faq_kbs.find({name: 'itrader'}).forEach(function(doc) {
            print('Bot ID:', doc._id, 'intentsEngine:', doc.intentsEngine);
        });
        "
        
        echo ""
        echo "üßπ Cache —Ü—ç–≤—ç—Ä–ª—ç–∂ –±–∞–π–Ω–∞..."
        docker-compose exec redis redis-cli -a redis123 FLUSHALL
        
        echo ""
        echo "üîÑ Chatbot restart —Ö–∏–π–∂ –±–∞–π–Ω–∞..."
        docker-compose restart tiledesk-chatbot
        
        echo ""
        echo "‚úÖ MongoDB NLP –∏–¥—ç–≤—Ö–∂–ª—ç—ç!"
        echo "üéØ –û–¥–æ–æ fulltext search –∞—à–∏–≥–ª–∞–Ω–∞"
        ;;
    [Bb]* )
        echo "üîß External AI Service —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö..."
        echo "‚ö†Ô∏è  –≠–Ω—ç –Ω—å –∏–ª“Ø“Ø —Ç”©–≤”©–≥—Ç—ç–π, AI service Docker container —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π"
        echo ""
        echo "üìã –•–∏–π—Ö —ë—Å—Ç–æ–π –∑“Ø–π–ª—Å:"
        echo "1. Tiledesk AI service Docker image —Ç–∞—Ç–∞—Ö"
        echo "2. docker-compose.yml –¥–æ—Ç–æ—Ä AI service –Ω—ç–º—ç—Ö"
        echo "3. AI service port 3000 –¥—ç—ç—Ä –∞–∂–∏–ª–ª—É—É–ª–∞—Ö"
        echo "4. Model —Ñ–∞–π–ª—É—É–¥ –±—ç–ª—Ç–≥—ç—Ö"
        echo ""
        echo "üí° –û–¥–æ–æ–≥–æ–æ—Ä MongoDB NLP –∞—à–∏–≥–ª–∞—Ö—ã–≥ –∑”©–≤–ª”©–∂ –±–∞–π–Ω–∞ (Option A)"
        ;;
    * )
        echo "‚ùå –ë—É—Ä—É—É —Å–æ–Ω–≥–æ–ª—Ç. A —ç—Å–≤—ç–ª B –≥—ç–∂ –±–∏—á—ç—ç—Ä—ç–π"
        ;;
esac

